//*********************************************** Delete Map
function delMap(map_rem)
{
  map_rem.setTarget(null);
    map_rem = null;
}
//***********************************************function to covert coordinate projection from 4326 to 3857
function convlon(lon) {
        var x = lon * 20037508.34 / 180;
        return x
}
function convlat(lat) {
        var y = Math.log(Math.tan((90 + lat) * Math.PI / 360)) / (Math.PI / 180);
        y = y * 20037508.34 / 180;
        return y
}

//***********************************************Adding a Geojson Vector layer
function addVectorLayer(map,url, projection)
{
  var newLayer = new BV.layer.Vector({
        source: new BV.source.Vector({
        projection: projection,
        url: url,
        format: new BV.format.GeoJSON()
      })
      });
  map.addLayer(newLayer);
  return newLayer;
}

//***********************************************Adding a KML layer
function addKMLlayer(map,url)
{

	var newKMLlayer = new BV.layer.Vector({
        source: new BV.source.Vector({
        url: url,
        format: new BV.format.KML()
        })
      });
	map.addLayer(newKMLlayer);
  return newKMLlayer;
}

//***********************************************Adding a WMS layer
function addWMSlayer(map,url,layer,version,ext,format)
{	
	var x1=ext[0];var y1=ext[1];var x2=ext[2];var y2=ext[3];
		var newWMSlayer = new BV.layer.Tile({
      // extent:[8553789.672555141,3300005.0918867784,8610006.015405744,3360762.9678628845],
		extent: [convlon(x1),convlat(y1),convlon(x2),convlat(y2)],
		source: new BV.source.TileWMS({
        url:url,
        params: {
          'TILED' : true,
          'VERSION': version,
          'LAYERS': layer,
          'FORMAT': format,
		 // 'matrixSet': matrixSet
        }
		
      })
	  });
	  map.addLayer(newWMSlayer);
    return newWMSlayer;
}

//***********************************************Adding a WMTS layer
function addWMTSlayer(map,url,layer,version,ext,format)
{
	 var projection = BV.proj.get('EPSG:3857');
      var tileSizePixels = 256;
      var tileSizeMtrs = BV.extent.getWidth(projection.getExtent()) / tileSizePixels;
      var matrixIds = [];
      var resolutions = [];
      for (var i = 0; i <= 14; i++) {
        matrixIds[i] = i;
        resolutions[i] = tileSizeMtrs / Math.pow(2, i);
      }
      var tileGrid = new BV.tilegrid.WMTS({
        origin: BV.extent.getTopLeft(projection.getExtent()),
        resolutions: resolutions,
        matrixIds: matrixIds
      });
	var x1=ext[0];var y1=ext[1];var x2=ext[2];var y2=ext[3];
	var newWMTSlayer = new BV.layer.Tile({
		extent: [convlon(x1),convlat(y1),convlon(x2),convlat(y2)],
		source: new BV.source.WMTS({
        url: url,
        layer:layer,
        format: format,
        tileGrid: tileGrid,
        style: 'default',
        dimensions: {
          'threshold': 100
        }
      })
	  });
	  map.addLayer(newWMTSlayer);
}

//***********************************************Remove a layer
function removelayer(map, layer)
{
  map.removeLayer(layer);
}
//***********************************************Adding XML file 

function addfeed(map, url, srsName, focus)
{ 
    const vectorSource = new BV.source.Vector({
          url: url,
          format: new BV.format.WFS({
            srsName: srsName
          }),
          projection: srsName
      });
      var vector = new BV.layer.Vector({
        source: vectorSource
      });
      map.addLayer(vector);
      if(focus == true)
      {
        vectorSource.on('change', e => {
          if (vectorSource.getState() === 'ready') {
            map.getView().fit(vectorSource.getExtent());
          }
        })
      }
      return vector;
}


// ****************************** Query for population
function givepopulation(state)
{
   $.ajax({
                type: "GET",
                url: "js/checkpop.php" ,
                data: { str: state },
                success : function() { 
                    // here is the code that will run on client side after running checkpop.php on server
                    // function below reloads current page
                   // location.reload();
                   // var val2 = "<?php echo $geom; ?>";
                    // console.log("population2 = "+val2);
   
                   console.log("compiled " +state);
                }

            });
// var val = "<?php echo $geom ?>";
// console.log("population = "+val);
   

}

// ****************************** Base map layer*******************
function firstLayer(type)
{
  if(type =="stamen")
  {
        return new BV.layer.Tile({
        source: new BV.source.Stamen
        ({
        layer: 'toner'
        })
      })
  }
  else if(type == "OSM")
  {
  return new BV.layer.Tile({
          source: new BV.source.OSM()
        })
  } 
}


 //*********************************************** Creating the basic overlay of map

function myMap(target,type,zoom,center)
{ 
  var x=center[0];
  var y = center[1];
  var newmap = new BV.Map({
      target: document.getElementById(target),
      view: new BV.View({
        center: [convlon(x),convlat(y)],
        // projection : BV.proj.get('EPSG:3857'),
        zoom: zoom
      })
    })
  newmap.addLayer(firstLayer(type));
   
  return newmap;
}
